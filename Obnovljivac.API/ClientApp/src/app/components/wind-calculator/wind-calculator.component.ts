import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';
import {
  IFormWindCalculatorBindingModel,
  WindCalculatorBindingModel,
} from 'src/app/models/autogenerated/windCalculatorBindingModel';
import {
  IFormWindSpeedPowerPairBindingModel
} from 'src/app/models/autogenerated/windSpeedPowerPairBindingModel';
import { WindService } from 'src/app/services/wind.service';

@Component({
  selector: 'app-wind-calculator',
  templateUrl: './wind-calculator.component.html',
  styleUrls: ['./wind-calculator.component.scss'],
})
export class WindCalculatorComponent implements OnInit {
  public form: FormGroup<IFormWindCalculatorBindingModel>;

  constructor(private fb: FormBuilder, private windService: WindService) {}

  ngOnInit(): void {
    this.initForm();
  }

  private initForm() {
    this.form = new FormGroup<IFormWindCalculatorBindingModel>({
      latitude: new FormControl(null),
      longitude: new FormControl(null),
      windClassWidth: new FormControl(null),
      windPowerPairs: new FormArray([]),
    });
  }

  public addNewPair(): void {
    let pairsControl = this.form.controls.windPowerPairs;

    if (pairsControl.invalid) {
      pairsControl.markAllAsTouched();
    }

    const newPair = new FormGroup<IFormWindSpeedPowerPairBindingModel>({
      power: new FormControl(123),
      windSpeed: new FormControl(1337),
    });

    pairsControl.push(newPair);
  }

  public submit(): void {
    this.form.controls;
    if (this.form.invalid) {
      this.form.markAllAsTouched();
    }

    const model: WindCalculatorBindingModel = this.form.getRawValue();

    this.windService.calculateWindEnergy(model);
  }
}
