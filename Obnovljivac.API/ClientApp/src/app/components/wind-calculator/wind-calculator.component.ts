import {
  ChangeDetectorRef,
  Component,
  ElementRef,
  OnDestroy,
  OnInit,
  ViewChild,
} from '@angular/core';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import {
  Icon,
  LeafletMouseEvent,
  Map,
  MapOptions,
  Marker,
  icon,
  latLng,
  marker,
  tileLayer,
} from 'leaflet';
import { Subject, take, takeUntil, tap } from 'rxjs';
import {
  IFormWindCalculatorBindingModel,
  WindCalculatorBindingModel,
} from 'src/app/models/autogenerated/windCalculatorBindingModel';
import { IFormWindSpeedPowerPairBindingModel } from 'src/app/models/autogenerated/windSpeedPowerPairBindingModel';
import { WindService } from 'src/app/services/wind.service';

@Component({
  selector: 'app-wind-calculator',
  templateUrl: './wind-calculator.component.html',
  styleUrls: ['./wind-calculator.component.scss'],
})
export class WindCalculatorComponent implements OnInit, OnDestroy {
  @ViewChild('tableContainer') tableContainerRef: ElementRef<HTMLElement>;
  private readonly LAT_DEFAULT = 45.8153;
  private readonly LNG_DEFAULT = 15.9665;
  private map: Map;
  private destroy$: Subject<void> = new Subject<void>();
  public form: FormGroup<IFormWindCalculatorBindingModel>;
  public submitDisabled: boolean = false;
  public energyByDay: number[][];
  public energyByMonth: number[];
  public yearlyEnergy: number;

  public pickMarker: Marker = this.markerBuilder(
    this.LAT_DEFAULT,
    this.LNG_DEFAULT
  );

  public options: MapOptions = {
    layers: [
      tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 18,
        minZoom: 1,
        attribution: '...',
      }),
    ],
    zoom: 7,
    center: latLng(this.LAT_DEFAULT, this.LNG_DEFAULT),
  };

  constructor(
    private windService: WindService,
    private cdRef: ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    this.initForm();
    this.subToWindClassChange();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private initForm() {
    this.form = new FormGroup<IFormWindCalculatorBindingModel>({
      latitude: new FormControl(this.LAT_DEFAULT, Validators.required),
      longitude: new FormControl(this.LNG_DEFAULT, Validators.required),
      windClassWidth: new FormControl(2, Validators.required),
      windPowerPairs: new FormArray([]),
    });

    this.addNewPair();
  }

  private subToWindClassChange(): void {
    const windClassControl = this.form.controls.windClassWidth;
    windClassControl.valueChanges
      .pipe(takeUntil(this.destroy$))
      .subscribe((val) => {
        this.updateWindSpeeds();
      });
  }

  private updateWindSpeeds(): void {
    const windClassSpeed = this.form.controls.windClassWidth.value;
    this.form.controls.windPowerPairs.controls.forEach((ctrl, i) => {
      ctrl.controls.windSpeed.setValue(i * windClassSpeed);
    });
  }

  public addNewPair(): void {
    let pairsControl = this.form.controls.windPowerPairs;
    if (pairsControl.invalid) {
      pairsControl.markAllAsTouched();
    }

    const newPair = new FormGroup<IFormWindSpeedPowerPairBindingModel>({
      windSpeed: new FormControl(
        { value: 0, disabled: true },
        Validators.required
      ),
      power: new FormControl(0, Validators.required),
    });
    pairsControl.push(newPair);

    this.updateWindSpeeds();
  }

  public removeLastPair(): void {
    let pairsControl = this.form.controls.windPowerPairs;

    if (pairsControl.length == 1) {
      return;
    }
    pairsControl.controls.pop();
  }

  public submit(): void {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
    }
    const model: WindCalculatorBindingModel = this.form.getRawValue();

    this.submitDisabled = true;
    this.windService
      .calculateWindEnergy(model)
      .pipe(
        take(1),
        tap((e) => {
          this.submitDisabled = false;
          this.energyByDay = [];
        })
      )
      .subscribe((res) => {
        this.energyByMonth = res.monthlyEnergy;
        this.yearlyEnergy = res.yearlyEnergy;

        for (let i = 0; i < 31; i++) {
          this.energyByDay[i] = [];
          res.dailyEnergy.forEach((month) => {
            let energy = month[i];
            this.energyByDay[i].push(energy ?? null);
          });
        }
        this.cdRef.detectChanges();

        var headerOffset = 64;
        var elementPosition =
          this.tableContainerRef.nativeElement.getBoundingClientRect().top;
        var offsetPosition =
          elementPosition + window.pageYOffset - headerOffset;
        window.scrollTo({ behavior: 'smooth', top: offsetPosition });
      });
  }

  public updatePosition(e: LeafletMouseEvent): void {
    this.form.controls.latitude.setValue(+e.latlng.lat.toFixed(4));
    this.form.controls.longitude.setValue(+e.latlng.lng.toFixed(4));

    this.pickMarker = this.markerBuilder(e.latlng.lat, e.latlng.lng);
  }

  private markerBuilder(lat: number, lng: number): Marker {
    return marker([lat, lng], {
      icon: icon({
        ...Icon.Default.prototype.options,
        iconUrl: 'assets/images/vendors/leaflet/marker-icon.png',
        iconRetinaUrl: 'assets/images/vendors/leaflet/marker-icon-2x.png',
        shadowUrl: 'assets/images/vendors/leaflet/marker-shadow.png',
      }),
    });
  }

  public onMapReady(map: Map) {
    this.map = map;
    // Do stuff with map
  }
}
