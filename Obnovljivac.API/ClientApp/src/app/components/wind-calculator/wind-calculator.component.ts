import { Component, OnDestroy, OnInit } from '@angular/core';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import { latLng, tileLayer } from 'leaflet';
import { Subject, takeUntil } from 'rxjs';
import {
  IFormWindCalculatorBindingModel,
  WindCalculatorBindingModel,
} from 'src/app/models/autogenerated/windCalculatorBindingModel';
import { IFormWindSpeedPowerPairBindingModel } from 'src/app/models/autogenerated/windSpeedPowerPairBindingModel';
import { WindService } from 'src/app/services/wind.service';

@Component({
  selector: 'app-wind-calculator',
  templateUrl: './wind-calculator.component.html',
  styleUrls: ['./wind-calculator.component.scss'],
})
export class WindCalculatorComponent implements OnInit, OnDestroy {
  private destroy$: Subject<void> = new Subject<void>();
  public form: FormGroup<IFormWindCalculatorBindingModel>;

  public options = {
    layers: [
      tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 18,
        minZoom: 1,
        attribution: '...',
      }),
    ],
    zoom: 7,
    center: latLng(45.815399, 15.966568),
  };

  constructor(private windService: WindService) {}

  ngOnInit(): void {
    this.initForm();
    this.subToWindClassChange();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private initForm() {
    this.form = new FormGroup<IFormWindCalculatorBindingModel>({
      latitude: new FormControl(45.815399, Validators.required),
      longitude: new FormControl(15.966568, Validators.required),
      windClassWidth: new FormControl(2, Validators.required),
      windPowerPairs: new FormArray([]),
    });

    this.addNewPair();
  }

  private subToWindClassChange(): void {
    const windClassControl = this.form.controls.windClassWidth;
    windClassControl.valueChanges
      .pipe(takeUntil(this.destroy$))
      .subscribe((val) => {
        this.updateWindSpeeds();
      });
  }

  private updateWindSpeeds(): void {
    const windClassSpeed = this.form.controls.windClassWidth.value;
    this.form.controls.windPowerPairs.controls.forEach((ctrl, i) => {
      ctrl.controls.windSpeed.setValue(i * windClassSpeed);
    });
  }

  public addNewPair(): void {
    let pairsControl = this.form.controls.windPowerPairs;
    if (pairsControl.invalid) {
      pairsControl.markAllAsTouched();
    }

    const newPair = new FormGroup<IFormWindSpeedPowerPairBindingModel>({
      windSpeed: new FormControl(
        { value: 0, disabled: true },
        Validators.required
      ),
      power: new FormControl(0, Validators.required),
    });
    pairsControl.push(newPair);

    this.updateWindSpeeds();
  }

  public removeLastPair(): void {
    let pairsControl = this.form.controls.windPowerPairs;

    if (pairsControl.length == 1) {
      return;
    }
    pairsControl.controls.pop();
  }

  public submit(): void {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
    }
    const model: WindCalculatorBindingModel = this.form.getRawValue();

    this.windService.calculateWindEnergy(model);
  }
}
